from Crypto.Util.number import inverse, long_to_bytes
from tqdm import tqdm

enc = 87051682992840829567429886737255563980229964191963649650455667117285375334750716083826527488071966389632402954644144719710970265754062176648776448421065665281172133368294041777397049228273163978348132440822019295870429065335674151133125629968366491582233750452365390672536361224322642295053741696809519283644
p = 92017932396773207330365205210913184771249549355771692523246399384571269833668487945963934319507538171501041280674304304879328757539798699280378034748542218248740777575679398093116579809607067129824965250071416089841516538588253944223235904445546895574651603636188746948921937704060334290364304972412697492577
h = 112112804524582393858675176460595338484428048338611753655869733059768929120327158352572131172253127933611583356499525126040647290513660017529498493355846656594143774393256151536590212031416153303085867445488047592792290033548349001067687775149867134619114482370143917491889371548968347491490942978508386339813

keys0 = [ pow( i, 65537, p ) for i in range( 2, 1000 ) ]
keys1 = [ pow( i, 65537, p ) for i in range( 1002, 2000 ) ]
keys2 = [ pow( i, 65537, p ) for i in range( 2002, 3000 ) ]
keys3 = [ pow( i, 65537, p ) for i in range( 3002, 4000 ) ]
keys4 = [ pow( i, 65537, p ) for i in range( 4002, 5000 ) ]

def main():
    mul01 = []
    hxor01 = []
    for key0 in tqdm( keys0 ):
        for key1 in keys1:
            hxor01.append( h^key0^key1 )
            mul01.append( key0*key1 )
    c = zip( hxor01, mul01 )
    hxm01 = dict( c )

    mul01234 = 0
    for key2 in tqdm( keys2 ):
        for key3 in keys3:
            for key4 in keys4:
                a = key2^key3^key4
                if a in hxm01:
                    mul01234 = hxm01[a]*key2*key3*key4
                    break

    tmp = pow( mul01234, p-2, p )
    res = enc * tmp % p
    flag = long_to_bytes( res )
    print( flag )

if __name__ == '__main__':
    main()
